PROGRAM test_draw
%NOLOCKGROUP
%STACKSIZE = 1000

%ifdef DEBUG_BUILD
%define LOG_NAME 'RD:draw_debug.DT'
%include display.c.klt
%endif

%include systemvars.klt
%include pathlib.c.klt
%include pathlib.t.klt
%include draw.klt

VAR
  polygon1 : PATH nodedata = t_VERTEX
  polygon2 : PATH nodedata = t_VERTEX
  polygon3 : PATH nodedata = t_VERTEX
  polygon4 : PATH nodedata = t_VERTEX
  poly_inset : PATH nodedata = t_VERTEX
  hull : PATH nodedata = t_VERTEX
  contours : PATH nodedata = t_VEC_PATH
  line_pth : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_SEG2D_POLY

%include kunit.klh
%from systemlib.klh %import VEC2D
%include draw.klh
%include draw.private.klh

%class tstcanv('canvas.klc', 'canvas.klh')

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

ROUTINE clear_path(p : PATH nodedata = t_VERTEX)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_path

ROUTINE clear_lines(p : PATH nodedata = t_SEG2D_POLY)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_lines

ROUTINE clear_line3d(p : PATH nodedata = t_SEGMENT)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_line3d

ROUTINE clear_contrs(p : PATH nodedata = t_VEC_PATH)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_contrs

ROUTINE append_nodes(p : PATH nodedata = t_VERTEX; nodes : INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO nodes DO
      APPEND_NODE(p,status)
    ENDFOR
  END append_nodes

ROUTINE path_to_arr(p : PATH nodedata = t_VERTEX; out_arr : ARRAY[*] OF VECTOR)
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(p) DO
      out_arr[i] = p[i].coords
    ENDFOR
  END path_to_arr

ROUTINE t_intersect : BOOLEAN
  VAR
    clipline : t_LINE2D
    clipseg : t_SEGMENT2D
    line1, line2, line3, line4 : t_LINE2D
    seg1, seg2, seg3, seg4 : t_SEGMENT2D
    alpha1, alpha2 : REAL
    intersects : ARRAY[4] OF BOOLEAN
    eval_alpha : ARRAY[4] OF BOOLEAN
  BEGIN
    clipline.point = VEC2D(-5,3)
    clipline.vec = VEC2D(10,-6)
    --eq of line p = p_0 + v*t
    clipseg.r0 = clipline.point + clipline.vec*0
    clipseg.r1 = clipline.point + clipline.vec*1

    --intersects at (0,0)
    line1.point = VEC2D(-10,-4)
    line1.vec = VEC2D(20,8)
    --convert into segment
    seg1.r0 = line1.point + line1.vec*0
    seg1.r1 = line1.point + line1.vec*1

    intersects[1] = draw__intersect(clipseg, seg1, alpha1, alpha2)
    eval_alpha[1] = kunit_eq_r(0.5, alpha1) AND kunit_eq_r(0.5, alpha2)

    --does not intersect
    line2.point = VEC2D(-5,-4)
    line2.vec = VEC2D(10,0)
    --convert into segment
    seg2.r0 = line2.point + line2.vec*0
    seg2.r1 = line2.point + line2.vec*1

    intersects[2] = draw__intersect(clipseg, seg2, alpha1, alpha2)

    --intersects at endpoints
    line3.point = VEC2D(-5,-5)
    line3.vec = VEC2D(10,2)
    --convert into segment
    seg3.r0 = line3.point + line3.vec*0
    seg3.r1 = line3.point + line3.vec*1

    intersects[3] = draw__intersect(clipseg, seg3, alpha1, alpha2)
    eval_alpha[3] = kunit_eq_r(1, alpha1) AND kunit_eq_r(1, alpha2)

    --intersects at 0.82
    line4.point = VEC2D(-5,-5)
    line4.vec = VEC2D(3,8)
    --convert into segment
    seg4.r0 = line4.point + line4.vec*0
    seg4.r1 = line4.point + line4.vec*1

    intersects[4] = draw__intersect(clipseg, seg4, alpha1, alpha2)
    eval_alpha[4] = kunit_eq_r(0.244, alpha1) AND kunit_eq_r(0.816, alpha2)


    RETURN(kunit_assert(intersects[1]) AND eval_alpha[1] AND &
           kunit_assert(intersects[3]) AND eval_alpha[3] AND &
           kunit_assert(intersects[4]) AND eval_alpha[4] AND &
           NOT kunit_assert(intersects[2]) )
  END t_intersect

ROUTINE t_anchr_pnts : BOOLEAN
  VAR
    i : INTEGER
    act_min, act_max : INTEGER
    exp_min, exp_max : INTEGER
    act_min2, act_max2 : INTEGER
    exp_min2, exp_max2 : INTEGER
  BEGIN
    --set polygon
    clear_contrs(contours)
    clear_path(polygon1)
    append_nodes(polygon1, 10)
    polygon1[1].coords = VEC2D(0,6)
    polygon1[2].coords = VEC2D(-1,4)
    polygon1[3].coords = VEC2D(-3,4)
    polygon1[4].coords = VEC2D(-1,3)
    polygon1[5].coords = VEC2D(-2,0)
    polygon1[6].coords = VEC2D(0,2)
    polygon1[7].coords = VEC2D(2,0)
    polygon1[8].coords = VEC2D(1,3)
    polygon1[9].coords = VEC2D(3,4)
    polygon1[10].coords = VEC2D(1,4)

    draw__trace(polygon1, 0, 1, PTH_LINETO, contours)

    act_min = draw__find_min(polygon1, 1, PATH_LEN(polygon1), draw__psuedo_center(polygon1), VEC2D(0,1))
    act_max = draw__find_max(polygon1, 1, PATH_LEN(polygon1), draw__psuedo_center(polygon1), VEC2D(0,1))

    exp_min = 7 ; exp_max = 1

    --set polygon
    clear_contrs(contours)
    clear_path(polygon2)
    append_nodes(polygon2, 6)
    polygon2[1].coords = VEC2D(3,0)
    polygon2[2].coords = VEC2D(5,4)
    polygon2[3].coords = VEC2D(9,4)
    polygon2[4].coords = VEC2D(9,-2)
    polygon2[5].coords = VEC2D(6,-3)
    polygon2[6].coords = VEC2D(6,0)

    draw__trace(polygon2, 0, 1, PTH_LINETO, contours)

    act_min2 = draw__find_max(polygon2, 1, PATH_LEN(polygon2), VEC2D(0,0), VEC2D(1,0))
    act_max2 = draw__find_max(polygon2, 1, PATH_LEN(polygon2), VEC2D(0,0), VEC2D(1,0))

    exp_min2 = 5 ; exp_max2 = 2

    RETURN(kunit_eq_int(exp_min, act_min) AND kunit_eq_int(exp_max, act_max) )-- AND &
           --kunit_eq_int(exp_min2, act_min2) AND kunit_eq_int(exp_max2, act_max2))

  END t_anchr_pnts

ROUTINE t_convhull : BOOLEAN
  VAR
    exp_hull : ARRAY[6] OF VECTOR
    hull_arr : ARRAY[10] OF VECTOR
  BEGIN
    clear_contrs(contours)

    --set polygon
    clear_path(polygon1)
    append_nodes(polygon1, 10)
    polygon1[1].coords = VEC2D(0,6)
    polygon1[2].coords = VEC2D(-1,4)
    polygon1[3].coords = VEC2D(-3,4)
    polygon1[4].coords = VEC2D(-1,3)
    polygon1[5].coords = VEC2D(-2,0)
    polygon1[6].coords = VEC2D(0,2)
    polygon1[7].coords = VEC2D(2,0)
    polygon1[8].coords = VEC2D(1,3)
    polygon1[9].coords = VEC2D(3,4)
    polygon1[10].coords = VEC2D(1,4)

    --compute convex hull
    draw__convex_hull(polygon1, TRUE, hull)
    draw__trace(polygon1, 0, 1, PTH_LINETO, contours)

    path_to_arr(hull, hull_arr)

    --expected hull
    exp_hull[1] = VEC2D(-3,4)
    exp_hull[2] = VEC2D(-2,0)
    exp_hull[3] = VEC2D(2,0)
    exp_hull[4] = VEC2D(3,4)
    exp_hull[5] = VEC2D(0,6)
    exp_hull[6] = VEC2D(-3,4)

    RETURN(kunit_eq_vec(exp_hull[1], hull_arr[1]) AND kunit_eq_vec(exp_hull[3], hull_arr[3]) AND &
           kunit_eq_vec(exp_hull[4], hull_arr[4]) AND kunit_eq_vec(exp_hull[6], hull_arr[6])  )

  END t_convhull

ROUTINE t_convhull_m : BOOLEAN
  VAR
    exp_hull : ARRAY[6] OF VECTOR
    hull_arr : ARRAY[10] OF VECTOR
  BEGIN
    clear_contrs(contours)

    --set polygon multiple bodies
    clear_path(polygon2)
    append_nodes(polygon2, 12)
    --square 1
    polygon2[1].coords = VEC2D(-8,3) ; polygon2[1].polygon = 1 ; polygon2[1].nextPoly = 5 ;  
    polygon2[2].coords = VEC2D(-6,1.5) ; polygon2[2].polygon = 1 ; polygon2[2].nextPoly = 5 ;
    polygon2[3].coords = VEC2D(-3,5.5) ; polygon2[3].polygon = 1 ; polygon2[3].nextPoly = 5 ;
    polygon2[4].coords = VEC2D(-5,7) ; polygon2[4].polygon = 1 ; polygon2[4].nextPoly = 5 ;
    --square 2
    polygon2[5].coords = VEC2D(-4.17,0.13) ; polygon2[5].polygon = 2 ; polygon2[5].nextPoly = 9 ; 
    polygon2[6].coords = VEC2D(0,-3) ; polygon2[6].polygon = 2 ; polygon2[6].nextPoly = 9 ;
    polygon2[7].coords = VEC2D(4.17,0.13) ; polygon2[7].polygon = 2 ; polygon2[7].nextPoly = 9 ;
    polygon2[8].coords = VEC2D(0,3.25) ; polygon2[8].polygon = 2 ; polygon2[8].nextPoly = 9 ;
    --square 3
    polygon2[9].coords = VEC2D(6,1.5) ; polygon2[9].polygon = 3 ;
    polygon2[10].coords = VEC2D(8,3) ; polygon2[10].polygon = 3 ;
    polygon2[11].coords = VEC2D(5,7) ; polygon2[11].polygon = 3 ;
    polygon2[12].coords = VEC2D(3,5.5) ; polygon2[12].polygon = 3 ;

    --compute convex hull
    draw__convex_hull(polygon2, TRUE, hull)
    draw__trace(polygon2, 0, 1, PTH_LINETO, contours)

    path_to_arr(hull, hull_arr)

    --expected hull
    exp_hull[1] = VEC2D(-8,3)
    exp_hull[2] = VEC2D(0,-3)
    exp_hull[3] = VEC2D(8,3)
    exp_hull[4] = VEC2D(5,7)
    exp_hull[5] = VEC2D(-5,7)
    exp_hull[6] = VEC2D(-8,3)

    RETURN(kunit_eq_vec(exp_hull[1], hull_arr[1]) AND kunit_eq_vec(exp_hull[3], hull_arr[3]) AND &
           kunit_eq_vec(exp_hull[4], hull_arr[4]) AND kunit_eq_vec(exp_hull[6], hull_arr[6]) )

  END t_convhull_m


ROUTINE t_bbox : BOOLEAN
  VAR
    act_box1 , act_box2 : t_RECT
    exp_box1 , exp_box2 : t_RECT
  BEGIN
    --set polygon
    clear_path(polygon2)
    append_nodes(polygon2, 6)

    polygon2[1].coords = VEC2D(0.34,-1.38)
    polygon2[2].coords = VEC2D(3.24,-0.7)
    polygon2[3].coords = VEC2D(6.22,1.74)
    polygon2[4].coords = VEC2D(3.48,5.46)
    polygon2[5].coords = VEC2D(-1.02,3.3)
    polygon2[6].coords = VEC2D(-1.74,0.84)
    
    act_box1 = draw__bounding_box(polygon2, 0)

    exp_box1.verts[1] = VEC2D(-1.74,-1.38)
    exp_box1.verts[2] = VEC2D(6.22,-1.38)
    exp_box1.verts[3] = VEC2D(6.22,5.46)
    exp_box1.verts[4] = VEC2D(-1.74,5.46)

    exp_box1.center = VEC2D(2.24,2.04)

    act_box2 = draw__bounding_box(polygon2, -45)

    exp_box2.verts[1] = VEC2D(-2.68,1.64)
    exp_box2.verts[2] = VEC2D(1.72,-2.76)
    exp_box2.verts[3] = VEC2D(6.71,2.23)
    exp_box2.verts[4] = VEC2D(2.31,6.63)

    exp_box2.center = VEC2D(2.015,1.935)

    RETURN(kunit_eq_vec(exp_box1.verts[1], act_box1.verts[1]) AND kunit_eq_vec(exp_box1.verts[4], act_box1.verts[4]) AND &
           kunit_eq_vec(exp_box1.center, act_box1.center) AND &
           kunit_eq_vec(exp_box2.verts[1], act_box2.verts[1]) AND kunit_eq_vec(exp_box2.verts[4], act_box2.verts[4]) AND &
           kunit_eq_vec(exp_box2.center, act_box2.center) )
  END t_bbox

ROUTINE t_p_on_poly : BOOLEAN
  VAR
    i : INTEGER
    v : ARRAY[4] OF VECTOR
    b : ARRAY[4] OF BOOLEAN
  BEGIN
    --set polygon
    clear_path(polygon1)
    append_nodes(polygon1, 10)
    polygon1[1].coords = VEC2D(0,6)
    polygon1[2].coords = VEC2D(-1,4)
    polygon1[3].coords = VEC2D(-3,4)
    polygon1[4].coords = VEC2D(-1,3)
    polygon1[5].coords = VEC2D(-2,0)
    polygon1[6].coords = VEC2D(0,2)
    polygon1[7].coords = VEC2D(2,0)
    polygon1[8].coords = VEC2D(1,3)
    polygon1[9].coords = VEC2D(3,4)
    polygon1[10].coords = VEC2D(1,4)

    --convex hull
    draw__convex_hull(polygon1, FALSE, hull)

    --set collision points
    v[1] = VEC2D(0,3.5)
    v[2] = VEC2D(-4,6)
    v[3] = VEC2D(-2,2)
    v[4] = VEC2D(-1.5,3.7)

    FOR i=1 TO ARRAY_LEN(v) DO
      b[i] = draw__point_collision_polygon(v[i], polygon1, hull)
    ENDFOR

    RETURN( kunit_assert(b[1]) AND NOT kunit_assert(b[2]) AND &
            NOT kunit_assert(b[3]) AND kunit_assert(b[4]) )


  END t_p_on_poly

ROUTINE t_p_on_poly2 : BOOLEAN
  VAR
    i : INTEGER
    v : ARRAY[4] OF VECTOR
    b : ARRAY[4] OF BOOLEAN
  BEGIN
    clear_contrs(contours)

    --set polygon
    clear_path(polygon2)
    append_nodes(polygon2, 10)
    polygon2[1].coords = VEC2D(6,0)
    polygon2[2].coords = VEC2D(10,0)
    polygon2[3].coords = VEC2D(10,1)
    polygon2[4].coords = VEC2D(8,1)
    polygon2[5].coords = VEC2D(8,3)
    polygon2[6].coords = VEC2D(9,3)
    polygon2[7].coords = VEC2D(9,2)
    polygon2[8].coords = VEC2D(10,2)
    polygon2[9].coords = VEC2D(10,4)
    polygon2[10].coords = VEC2D(6,4)

    --convex hull
    draw__convex_hull(polygon2, FALSE, hull)
    draw__trace(polygon2, 0, 1, PTH_LINETO, contours)

    --set collision points
    v[1] = VEC2D(7,2)
    v[2] = VEC2D(8,4.5)
    v[3] = VEC2D(9,1.5)
    v[4] = VEC2D(9.6,2.4)

    FOR i=1 TO ARRAY_LEN(v) DO
      b[i] = draw__point_collision_polygon(v[i], polygon2, hull)
    ENDFOR

    RETURN( NOT kunit_assert(b[1]) AND NOT kunit_assert(b[2]) AND &
            NOT kunit_assert(b[3]) AND kunit_assert(b[4]) )


  END t_p_on_poly2


ROUTINE t_clip_line : BOOLEAN
  VAR
    line : ARRAY[3] OF t_SEGMENT2D
    exp_line : ARRAY[4] OF t_SEGMENT2D
    line_count : INTEGER
    perp : VECTOR
  BEGIN
    --clear lines 
    clear_lines(lines)

    --set polygon
    clear_path(polygon1)
    append_nodes(polygon1, 10)
    polygon1[1].coords = VEC2D(0,6)
    polygon1[2].coords = VEC2D(-1,4)
    polygon1[3].coords = VEC2D(-3,4)
    polygon1[4].coords = VEC2D(-1,3)
    polygon1[5].coords = VEC2D(-2,0)
    polygon1[6].coords = VEC2D(0,2)
    polygon1[7].coords = VEC2D(2,0)
    polygon1[8].coords = VEC2D(1,3)
    polygon1[9].coords = VEC2D(3,4)
    polygon1[10].coords = VEC2D(1,4)

    -- convex hull
    draw__convex_hull(polygon1, FALSE, hull)

    --create line
    line[1].r0 = VEC2D(-2,6)
    line[1].r1 = VEC2D(3,0)
    --clip line
    line_count = draw__clip_line_with_poly(line[1], polygon1, hull, TRUE, lines)
    --expected lines
    exp_line[1].r0 = VEC2D(-0.75,4.5) ; exp_line[1].r1 = VEC2D(1.333,2) ;

    --create line
    line[2].r0 = VEC2D(-3,2)
    line[2].r1 = VEC2D(3,0.5)
    --clip line
    line_count = draw__clip_line_with_poly(line[2], polygon1, hull, TRUE, lines)
    --expected lines
    exp_line[2].r0 = VEC2D(-1.462,1.615) ; exp_line[2].r1 = VEC2D(-0.6,1.4) ;
    exp_line[3].r0 = VEC2D(1,1) ; exp_line[3].r1 = VEC2D(1.727,0.818) ;
    
    --create line
    line[3].r0 = VEC2D(-2,5)
    line[3].r1 = VEC2D(2,5)
    --clip line
    line_count = draw__clip_line_with_poly(line[3], polygon1, hull, TRUE, lines)

    exp_line[4].r0 = VEC2D(-0.5,5) ; exp_line[4].r1 = VEC2D(0.5,5) ;

    RETURN(kunit_eq_vec(exp_line[1].r0, lines[1].r0) AND kunit_eq_vec(exp_line[1].r1, lines[1].r1) AND &
    kunit_eq_vec(exp_line[2].r0, lines[2].r0) AND kunit_eq_vec(exp_line[2].r1, lines[2].r1) AND &
    kunit_eq_vec(exp_line[3].r0, lines[3].r0) AND kunit_eq_vec(exp_line[3].r1, lines[3].r1) AND &
    kunit_eq_vec(exp_line[4].r0, lines[4].r0) AND kunit_eq_vec(exp_line[4].r1, lines[4].r1) )

  END t_clip_line


ROUTINE t_clip_line2 : BOOLEAN
  VAR
    line : ARRAY[2] OF t_SEGMENT2D
    exp_line : ARRAY[5] OF t_SEGMENT2D
    line_count : INTEGER
  BEGIN
    --clear lines 
    clear_lines(lines)
    clear_contrs(contours)

    --set polygon
    clear_path(polygon2)
    append_nodes(polygon2, 10)
    polygon2[1].coords = VEC2D(6,0)
    polygon2[2].coords = VEC2D(10,0)
    polygon2[3].coords = VEC2D(10,1)
    polygon2[4].coords = VEC2D(8,1)
    polygon2[5].coords = VEC2D(8,3)
    polygon2[6].coords = VEC2D(9,3)
    polygon2[7].coords = VEC2D(9,2)
    polygon2[8].coords = VEC2D(10,2)
    polygon2[9].coords = VEC2D(10,4)
    polygon2[10].coords = VEC2D(6,4)

    -- convex hull
    draw__convex_hull(polygon2, FALSE, hull)

    --create line
    line[1].r0 = VEC2D(7.32,0.37)
    line[1].r1 = VEC2D(9.66,2.41)
    --clip line
    line_count = draw__clip_line_with_poly(line[1], polygon2, hull, TRUE, lines)

    --expected lines
    exp_line[1].r0 = VEC2D(7.32,0.37) ; exp_line[1].r1 = VEC2D(8.043,1)
    exp_line[2].r0 = VEC2D(9.190,2) ; exp_line[2].r1 = VEC2D(9.66,2.41)

    --create line
    line[2].r0 = VEC2D(8.44,3.59)
    line[2].r1 = VEC2D(10.09,0.5)
    --clip line
    line_count = draw__clip_line_with_poly(line[2], polygon2, hull, TRUE, lines)

    draw__trace(polygon2, 0, 1, PTH_LINETO, contours)

    --expected lines
    exp_line[3].r0 = VEC2D(8.44,3.590) ; exp_line[3].r1 = VEC2D(8.755,3) ;
    exp_line[4].r0 = VEC2D(9,2.541) ; exp_line[4].r1 = VEC2D(9.289,2) ;
    exp_line[5].r0 = VEC2D(9.823,1) ; exp_line[5].r1 = VEC2D(10,0.668) ;

    RETURN(kunit_eq_vec(exp_line[1].r0, lines[1].r0) AND kunit_eq_vec(exp_line[1].r1, lines[1].r1) AND &
           kunit_eq_vec(exp_line[2].r0, lines[2].r0) AND kunit_eq_vec(exp_line[2].r1, lines[2].r1) AND &
           kunit_eq_vec(exp_line[3].r0, lines[3].r0) AND kunit_eq_vec(exp_line[3].r1, lines[3].r1) AND &
           kunit_eq_vec(exp_line[4].r0, lines[4].r0) AND kunit_eq_vec(exp_line[4].r1, lines[4].r1) AND &
           kunit_eq_vec(exp_line[5].r0, lines[5].r0) AND kunit_eq_vec(exp_line[5].r1, lines[5].r1) )

  END t_clip_line2

ROUTINE t_clpln_mult : BOOLEAN
  VAR
    line : ARRAY[1] OF t_SEGMENT2D
    exp_line : ARRAY[3] OF t_SEGMENT2D
    line_count : INTEGER
  BEGIN
    --clear lines 
    clear_lines(lines)

    --set polygon
    clear_path(polygon3)
    append_nodes(polygon3, 12)
    polygon3[1].coords = VEC2D(0,14) ; polygon3[1].polygon = 1 ; polygon3[1].nextPoly = 5 ;  
    polygon3[2].coords = VEC2D(0,10) ; polygon3[2].polygon = 1 ; polygon3[2].nextPoly = 5 ;  
    polygon3[3].coords = VEC2D(2,10) ; polygon3[3].polygon = 1 ; polygon3[3].nextPoly = 5 ;  
    polygon3[4].coords = VEC2D(2,14) ; polygon3[4].polygon = 1 ; polygon3[4].nextPoly = 5 ;  
    polygon3[5].coords = VEC2D(4,14) ; polygon3[5].polygon = 2 ; polygon3[5].nextPoly = 9 ;  
    polygon3[6].coords = VEC2D(4,10) ; polygon3[6].polygon = 2 ; polygon3[6].nextPoly = 9 ;  
    polygon3[7].coords = VEC2D(6,10) ; polygon3[7].polygon = 2 ; polygon3[7].nextPoly = 9 ;  
    polygon3[8].coords = VEC2D(6,14) ; polygon3[8].polygon = 2 ; polygon3[8].nextPoly = 9 ;  
    polygon3[9].coords = VEC2D(8,14) ; polygon3[9].polygon = 3 ;
    polygon3[10].coords = VEC2D(8,10) ; polygon3[10].polygon = 3 ;
    polygon3[11].coords = VEC2D(10,10) ; polygon3[11].polygon = 3 ;
    polygon3[12].coords = VEC2D(10,14) ; polygon3[12].polygon = 3 ;

    -- convex hull
    draw__convex_hull(polygon3, FALSE, hull)

    --create line
    line[1].r0 = VEC2D(-1.96,10.89)
    line[1].r1 = VEC2D(11.68,12.84)
    --clip line
    line_count = draw__clip_line_with_poly(line[1], polygon3, hull, TRUE, lines)

    --expected lines
    exp_line[1].r0 = VEC2D(0,11.17) ; exp_line[1].r1 = VEC2D(2,11.456)
    exp_line[2].r0 = VEC2D(4,11.742) ; exp_line[2].r1 = VEC2D(6,12.028)
    exp_line[3].r0 = VEC2D(8,12.314) ; exp_line[3].r1 = VEC2D(10,12.6)

    RETURN(kunit_eq_vec(exp_line[1].r0, lines[1].r0) AND kunit_eq_vec(exp_line[1].r1, lines[1].r1) AND &
           kunit_eq_vec(exp_line[2].r0, lines[2].r0) AND kunit_eq_vec(exp_line[2].r1, lines[2].r1) AND &
           kunit_eq_vec(exp_line[3].r0, lines[3].r0) AND kunit_eq_vec(exp_line[3].r1, lines[3].r1) )

  END t_clpln_mult

ROUTINE t_raster1 : BOOLEAN
  VAR
    exp_line : ARRAY[8] OF t_SEGMENT2D
    b1, b2 : ARRAY[10] OF BOOLEAN
%define EPSILON 0.05
  BEGIN
    --clear lines 
    clear_lines(lines)
    clear_contrs(contours)

    --set polygon
    clear_path(polygon1)
    append_nodes(polygon1, 10)
    polygon1[1].coords = VEC2D(0,6)
    polygon1[2].coords = VEC2D(-1,4)
    polygon1[3].coords = VEC2D(-3,4)
    polygon1[4].coords = VEC2D(-1,3)
    polygon1[5].coords = VEC2D(-2,0)
    polygon1[6].coords = VEC2D(0,2)
    polygon1[7].coords = VEC2D(2,0)
    polygon1[8].coords = VEC2D(1,3)
    polygon1[9].coords = VEC2D(3,4)
    polygon1[10].coords = VEC2D(1,4)

    draw__raster_lines(polygon1, hull, 0, 1, 1, -1, FALSE, lines)

    draw__trace(polygon1, 0, 1, PTH_LINETO, contours)

    --expected lines
    exp_line[1].r0 = VEC2D(1.833,0.5) ; exp_line[1].r1 = VEC2D(1.5,0.5)
    exp_line[2].r0 = VEC2D(-1.5,0.5) ;  exp_line[2].r1 = VEC2D(-1.833,0.5)
    exp_line[3].r0 = VEC2D(1.5,1.5) ;   exp_line[3].r1 = VEC2D(0.5,1.5)
    exp_line[4].r0 = VEC2D(-0.5,1.5) ;  exp_line[4].r1 = VEC2D(-1.5,1.5)
    exp_line[5].r0 = VEC2D(1.167,2.5) ; exp_line[5].r1 = VEC2D(-1.167,2.5)
    exp_line[6].r0 = VEC2D(2,3.5) ;     exp_line[6].r1 = VEC2D(-2,3.5)
    exp_line[7].r0 = VEC2D(0.75,4.5) ;  exp_line[7].r1 = VEC2D(-0.75,4.5)
    exp_line[8].r0 = VEC2D(0.25,5.5) ;  exp_line[8].r1 = VEC2D(-0.25,5.5)

    b1[1] = kunit_eq_vrl(exp_line[1].r0, lines[1].r0,EPSILON)
    b1[2] = kunit_eq_vrl(exp_line[1].r1, lines[1].r1,EPSILON)
    b1[3] = kunit_eq_vrl(exp_line[2].r0, lines[2].r0,EPSILON)
    b1[4] = kunit_eq_vrl(exp_line[2].r1, lines[2].r1,EPSILON)
    b1[5] = kunit_eq_vrl(exp_line[3].r0, lines[3].r0,EPSILON)
    b1[6] = kunit_eq_vrl(exp_line[3].r1, lines[3].r1,EPSILON)
    b1[7] = kunit_eq_vrl(exp_line[4].r0, lines[4].r0,EPSILON)
    b1[8] = kunit_eq_vrl(exp_line[4].r1, lines[4].r1,EPSILON)
    b1[9] = kunit_eq_vrl(exp_line[5].r0, lines[5].r0,EPSILON)
    b1[10] = kunit_eq_vrl(exp_line[5].r1, lines[5].r1,EPSILON)

    --clear lines 
    clear_lines(lines)

    draw__raster_lines(polygon1, hull, 45, 1, 1, -1, FALSE, lines)

    --expected lines
    exp_line[1].r0 = VEC2D(1.823,0.530) ; exp_line[1].r1 = VEC2D(1.646,0.353)
    exp_line[2].r0 = VEC2D(1.47,1.591) ;  exp_line[2].r1 = VEC2D(0.939,1.061)
    exp_line[3].r0 = VEC2D(2.464,4) ;     exp_line[3].r1 = VEC2D(1.929,3.464)
    exp_line[4].r0 = VEC2D(1.116,2.652) ; exp_line[4].r1 = VEC2D(0.232,1.768)
    exp_line[5].r0 = VEC2D(1.05,4) ;      exp_line[5].r1 = VEC2D(-1.525,1.425)
    exp_line[6].r0 = VEC2D(0.545,4.909) ; exp_line[6].r1 = VEC2D(-1.243,3.121)
    exp_line[7].r0 = VEC2D(0.073,5.852) ; exp_line[7].r1 = VEC2D(-0.221,5.556)
    exp_line[8].r0 = VEC2D(-1.778,4) ; exp_line[8].r1 = VEC2D(-2.185,3.593)

    b2[1] = kunit_eq_vrl(exp_line[1].r0, lines[1].r0,EPSILON)
    b2[2] = kunit_eq_vrl(exp_line[1].r1, lines[1].r1,EPSILON)
    b2[3] = kunit_eq_vrl(exp_line[2].r0, lines[2].r0,EPSILON)
    b2[4] = kunit_eq_vrl(exp_line[2].r1, lines[2].r1,EPSILON)
    b2[5] = kunit_eq_vrl(exp_line[3].r0, lines[3].r0,EPSILON)
    b2[6] = kunit_eq_vrl(exp_line[3].r1, lines[3].r1,EPSILON)
    b2[7] = kunit_eq_vrl(exp_line[4].r0, lines[4].r0,EPSILON)
    b2[8] = kunit_eq_vrl(exp_line[4].r1, lines[4].r1,EPSILON)
    b2[9] = kunit_eq_vrl(exp_line[5].r0, lines[5].r0,EPSILON)
    b2[10] = kunit_eq_vrl(exp_line[5].r1, lines[5].r1,EPSILON)

    RETURN( kunit_eq_arb(b1) AND kunit_eq_arb(b2))

  END t_raster1

ROUTINE t_raster2 : BOOLEAN
  VAR
    origin : XYZWPR
%define radius 150
%define num_of_points 5
    i : INTEGER
    b : ARRAY[num_of_points] OF BOOLEAN
    status : INTEGER
  BEGIN
    --clear lines 
    clear_lines(lines)

    clear_path(polygon3)

    origin = POS(radius,radius,0,0,0,180, (ZEROPOS(1).Config_data))
    draw__hexagon(radius, num_of_points, origin, polygon3)

    APPEND_NODE(polygon3, status)
    polygon3[PATH_LEN(polygon3)] = polygon3[1]
    DELETE_NODE(polygon3, 1, status)


    draw__raster_lines(polygon3, hull, 90, 0, 20, -1, TRUE, lines)
    RETURN(TRUE)

  END t_raster2

ROUTINE t_inset : BOOLEAN
  VAR
    exp_vert : ARRAY[8] OF VECTOR
  BEGIN
    --set polygon
    clear_path(polygon4)
    append_nodes(polygon4, 8)
    polygon4[1].coords = VEC2D(-8,0)
    polygon4[2].coords = VEC2D(-2,0)
    polygon4[3].coords = VEC2D(-2,2)
    polygon4[4].coords = VEC2D(-4,2)
    polygon4[5].coords = VEC2D(-4,8)
    polygon4[6].coords = VEC2D(-6,8)
    polygon4[7].coords = VEC2D(-6,2)
    polygon4[8].coords = VEC2D(-8,2)

    exp_vert[1] = VEC2D(-2.4,0.4)
    exp_vert[2] = VEC2D(-2.4,1.6)
    exp_vert[3] = VEC2D(-4.4,1.6)
    exp_vert[4] = VEC2D(-4.4,7.6)
    exp_vert[5] = VEC2D(-5.6,7.6)
    exp_vert[6] = VEC2D(-5.6,1.6)
    exp_vert[7] = VEC2D(-7.6,1.6)
    exp_vert[8] = VEC2D(-7.6,0.4)

    clear_path(poly_inset)
    draw__inset_polygon(polygon4, 0.4, hull, poly_inset)

    RETURN(kunit_eq_vec(exp_vert[1], poly_inset[1].coords) AND kunit_eq_vec(exp_vert[3], poly_inset[3].coords) AND &
           kunit_eq_vec(exp_vert[5], poly_inset[5].coords) AND kunit_eq_vec(exp_vert[6], poly_inset[6].coords) AND &
           kunit_eq_vec(exp_vert[8], poly_inset[8].coords) )
  END t_inset

ROUTINE t_inset_mult : BOOLEAN
  VAR
    exp_vert : ARRAY[12] OF VECTOR
  BEGIN
    --set polygon
    clear_path(polygon3)
    append_nodes(polygon3, 12)
    polygon3[1].coords = VEC2D(0,14) ; polygon3[1].polygon = 1 ; polygon3[1].nextPoly = 5 ;  
    polygon3[2].coords = VEC2D(0,10) ; polygon3[2].polygon = 1 ; polygon3[2].nextPoly = 5 ;  
    polygon3[3].coords = VEC2D(2,10) ; polygon3[3].polygon = 1 ; polygon3[3].nextPoly = 5 ;  
    polygon3[4].coords = VEC2D(2,14) ; polygon3[4].polygon = 1 ; polygon3[4].nextPoly = 5 ;  
    polygon3[5].coords = VEC2D(4,14) ; polygon3[5].polygon = 2 ; polygon3[5].nextPoly = 9 ;  
    polygon3[6].coords = VEC2D(4,10) ; polygon3[6].polygon = 2 ; polygon3[6].nextPoly = 9 ;  
    polygon3[7].coords = VEC2D(6,10) ; polygon3[7].polygon = 2 ; polygon3[7].nextPoly = 9 ;  
    polygon3[8].coords = VEC2D(6,14) ; polygon3[8].polygon = 2 ; polygon3[8].nextPoly = 9 ;  
    polygon3[9].coords = VEC2D(8,14) ; polygon3[9].polygon = 3 ;
    polygon3[10].coords = VEC2D(8,10) ; polygon3[10].polygon = 3 ;
    polygon3[11].coords = VEC2D(10,10) ; polygon3[11].polygon = 3 ;
    polygon3[12].coords = VEC2D(10,14) ; polygon3[12].polygon = 3 ;

    clear_path(poly_inset)
    draw__inset_polygon(polygon3, 0.5, hull, poly_inset)
    
    --expected verts
    exp_vert[1] = VEC2D(0.5,10.5)
    exp_vert[2] = VEC2D(1.5,10.5)
    exp_vert[3] = VEC2D(1.5,13.5)
    exp_vert[4] = VEC2D(0.5,13.5)
    exp_vert[5] = VEC2D(4.5,10.5)
    exp_vert[6] = VEC2D(5.5,10.5)
    exp_vert[7] = VEC2D(5.5,13.5)
    exp_vert[8] = VEC2D(4.5,13.5)
    exp_vert[9] = VEC2D(8.5,10.5)
    exp_vert[10] = VEC2D(9.5,10.5)
    exp_vert[11] = VEC2D(9.5,13.5)
    exp_vert[12] = VEC2D(8.5,13.5)


    RETURN(kunit_eq_vec(exp_vert[1], poly_inset[1].coords) AND kunit_eq_vec(exp_vert[4], poly_inset[4].coords) AND &
           kunit_eq_vec(exp_vert[6], poly_inset[6].coords) AND kunit_eq_vec(exp_vert[7], poly_inset[7].coords) AND &
           kunit_eq_vec(exp_vert[9], poly_inset[9].coords) AND kunit_eq_vec(exp_vert[12], poly_inset[12].coords) AND &
           kunit_eq_int((polygon3[10].polygon), (poly_inset[10].polygon)) AND kunit_eq_int((polygon3[7].polygon), (poly_inset[7].polygon)) AND &
           kunit_eq_int((polygon3[2].nextPoly), (poly_inset[2].nextPoly)) AND kunit_eq_int((polygon3[7].nextPoly), (poly_inset[7].nextPoly)) )
  END t_inset_mult

ROUTINE t_trace : BOOLEAN
  VAR
    i : INTEGER
    act_cntr_v, exp_cntr_v : ARRAY[8] OF VECTOR
    act_cntr_c, exp_cntr_c : ARRAY[8] OF INTEGER
  BEGIN
    --clear lines 
    clear_contrs(contours)

    --set polygon
    clear_path(polygon1)
    append_nodes(polygon1, 10)
    polygon1[1].coords = VEC2D(0,6)
    polygon1[2].coords = VEC2D(-1,4)
    polygon1[3].coords = VEC2D(-3,4)
    polygon1[4].coords = VEC2D(-1,3)
    polygon1[5].coords = VEC2D(-2,0)
    polygon1[6].coords = VEC2D(0,2)
    polygon1[7].coords = VEC2D(2,0)
    polygon1[8].coords = VEC2D(1,3)
    polygon1[9].coords = VEC2D(3,4)
    polygon1[10].coords = VEC2D(1,4)

    --draw lines around polygon
    draw__trace(polygon1, 0, 1, PTH_LINETO, contours)

    --clear inset
    clear_path(poly_inset)
    --inset polygon
    draw__inset_polygon(polygon1, 0.5, hull, poly_inset)

    --draw lines around inset
    draw__trace(poly_inset, 45, 1, PTH_LINETO, contours)

    FOR i=1 TO ARRAY_LEN(exp_cntr_v) DO
      act_cntr_v[i] = contours[i+11].v
      act_cntr_c[i] = contours[i+11].code
    ENDFOR

    --expected points
    exp_cntr_v[1] = VEC2D(0.855, 1.851) ; exp_cntr_c[1] = 1
    exp_cntr_v[2] = VEC2D(0.388, 3.253) ; exp_cntr_c[2] = 2
    exp_cntr_v[3] = VEC2D(0.691, 3.5) ;   exp_cntr_c[3] = 2
    exp_cntr_v[4] = VEC2D(0.0, 4.882) ;   exp_cntr_c[4] = 2
    exp_cntr_v[5] = VEC2D(-0.691, 3.5) ;  exp_cntr_c[5] = 2
    exp_cntr_v[6] = VEC2D(-0.388, 3.253); exp_cntr_c[6] = 2
    exp_cntr_v[7] = VEC2D(-0.855, 1.851); exp_cntr_c[7] = 2 
    exp_cntr_v[8] = VEC2D(0.0, 2.707) ;   exp_cntr_c[8] = 2  

    RETURN(kunit_eq_arv(exp_cntr_v, act_cntr_v, 0.05) AND kunit_eq_ari(exp_cntr_c, act_cntr_c))

  END t_trace

ROUTINE t_class_poly : BOOLEAN
  VAR
    i : INTEGER
    act_line_r0, exp_line_r0 : ARRAY[10] OF VECTOR
    act_line_r1, exp_line_r1 : ARRAY[10] OF VECTOR
  BEGIN

    --draw polygon
    --set polygon
    clear_path(polygon2)
    append_nodes(polygon2, 10)
    polygon2[1].coords = VEC2D(6,0)
    polygon2[2].coords = VEC2D(10,0)
    polygon2[3].coords = VEC2D(10,1)
    polygon2[4].coords = VEC2D(8,1)
    polygon2[5].coords = VEC2D(8,3)
    polygon2[6].coords = VEC2D(9,3)
    polygon2[7].coords = VEC2D(9,2)
    polygon2[8].coords = VEC2D(10,2)
    polygon2[9].coords = VEC2D(10,4)
    polygon2[10].coords = VEC2D(6,4)

    --initialize polygon object
      --( frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch )
    tstcanv__init(POS(212.132,40,212.132,0,-45,0,(ZEROPOS(1).Config_data)), FALSE, -45, 1, 2, 0.2, 0.3)
    tstcanv__append_polygon(polygon2)
    --raster lines
    tstcanv__raster(PTH_LINETO)

    --clear lines 
    clear_lines(lines)
    tstcanv__get_lines(1, 10, lines)

    FOR i=1 TO ARRAY_LEN(act_line_r0) DO
      act_line_r0[i] = lines[i].r0
      act_line_r1[i] = lines[i].r1
    ENDFOR

    --expected lines
    exp_line_r0[1] = VEC2D(6.400,0.541) ; exp_line_r1[1] = VEC2D(6.541,0.400) ; 
    exp_line_r0[2] = VEC2D(6.400,0.965) ; exp_line_r1[2] = VEC2D(6.966,0.400) ; 
    exp_line_r0[3] = VEC2D(6.400,1.390) ; exp_line_r1[3] = VEC2D(7.390,0.400) ;
    exp_line_r0[4] = VEC2D(6.400,1.814) ; exp_line_r1[4] = VEC2D(7.814, 0.400) ;
    exp_line_r0[5] = VEC2D(6.400,2.238) ; exp_line_r1[5] = VEC2D(7.600,1.038) ;
    exp_line_r0[6] = VEC2D(8.038,0.600) ; exp_line_r1[6] = VEC2D(8.238,0.400) ;
    exp_line_r0[7] = VEC2D(6.400,2.663) ; exp_line_r1[7] = VEC2D(7.600,1.463) ;
    exp_line_r0[8] = VEC2D(8.463,0.600) ; exp_line_r1[8] = VEC2D(8.663,0.400) ;
    exp_line_r0[9] = VEC2D(6.400,3.087) ; exp_line_r1[9] = VEC2D(7.600,1.887) ;
    exp_line_r0[10] = VEC2D(8.887, 0.600) ; exp_line_r1[10] = VEC2D(9.087, 0.400) ;

    RETURN(kunit_eq_arv(exp_line_r0, act_line_r0, 0.05) AND kunit_eq_arv(exp_line_r1, act_line_r1, 0.05) )
  
  END t_class_poly

ROUTINE t_classpoly2 : BOOLEAN
  VAR
    i : INTEGER
    act_line_r0, exp_line_r0 : ARRAY[12] OF VECTOR
    act_line_r1, exp_line_r1 : ARRAY[12] OF VECTOR
  BEGIN

    --draw polygon
    --set polygon
    clear_path(polygon2)
    append_nodes(polygon2, 8)
    polygon2[1].coords = VEC2D(-40,10)   
    polygon2[2].coords = VEC2D(-10,40)   
    polygon2[3].coords = VEC2D(0,0)
    polygon2[4].coords = VEC2D(10,40)
    polygon2[5].coords = VEC2D(40,10)   
    polygon2[6].coords = VEC2D(20,60)   
    polygon2[7].coords = VEC2D(0,120)
    polygon2[8].coords = VEC2D(-20,60)

    --initialize polygon object
      --( frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch )
    tstcanv__init((ZEROPOS(1)), TRUE, 0, 1, 1, 0, 10)
    tstcanv__append_polygon(polygon2)
    --raster lines
    tstcanv__raster(PTH_LINETO)
    --traces
    tstcanv__trace(PTH_LINETO)

    --clear lines 
    clear_lines(lines)
    tstcanv__get_lines(1, 12, lines)

    FOR i=1 TO ARRAY_LEN(act_line_r0) DO
      act_line_r0[i] = lines[i].r0
      act_line_r1[i] = lines[i].r1
    ENDFOR

    --expected lines
    exp_line_r0[1] = VEC2D(-2.5,10) ; exp_line_r1[1] = VEC2D(2.5,10) ; 
    exp_line_r0[2] = VEC2D(-36,20) ;  exp_line_r1[2] = VEC2D(-30,20) ; 
    exp_line_r0[3] = VEC2D(-5,20) ;   exp_line_r1[3] = VEC2D(5,20) ;
    exp_line_r0[4] = VEC2D(30,20) ;   exp_line_r1[4] = VEC2D(36,20) ;
    exp_line_r0[5] = VEC2D(-32,30) ;  exp_line_r1[5] = VEC2D(-20,30) ;
    exp_line_r0[6] = VEC2D(-7.5,30) ; exp_line_r1[6] = VEC2D(7.5,30) ;
    exp_line_r0[7] = VEC2D(20,30) ;   exp_line_r1[7] = VEC2D(32,30) ;
    exp_line_r0[8] = VEC2D(-28,40) ;  exp_line_r1[8] = VEC2D(28,40) ;
    exp_line_r0[9] = VEC2D(-24.000, 50.000) ;  exp_line_r1[9] = VEC2D(24.000, 50.000) ;
    exp_line_r0[10] = VEC2D(-20.000, 60.000) ;  exp_line_r1[10] = VEC2D(20.000, 60.000) ;
    exp_line_r0[11] = VEC2D(-16.667, 70.000) ;  exp_line_r1[11] = VEC2D(16.667, 70.000) ;
    exp_line_r0[12] = VEC2D(-13.333, 80.000) ;  exp_line_r1[12] = VEC2D(13.333, 80.000) ;

    RETURN(kunit_eq_arv(exp_line_r0, act_line_r0, 0.05) AND kunit_eq_arv(exp_line_r1, act_line_r1, 0.05) )
  
  END t_classpoly2

ROUTINE t_rast_multi : BOOLEAN
  VAR
    i : INTEGER
    act_line_r0, exp_line_r0 : ARRAY[10] OF VECTOR
    act_line_r1, exp_line_r1 : ARRAY[10] OF VECTOR
  BEGIN
    tstcanv__new

    --set polygon
    clear_path(polygon3)
    append_nodes(polygon3, 4)
    
    polygon3[1].coords = VEC2D(0,30)   
    polygon3[2].coords = VEC2D(30,30)   
    polygon3[3].coords = VEC2D(30,60)
    polygon3[4].coords = VEC2D(0,60)
    tstcanv__append_polygon(polygon3)
   
    polygon3[1].coords = VEC2D(60,30)   
    polygon3[2].coords = VEC2D(90,30)   
    polygon3[3].coords = VEC2D(90,60)
    polygon3[4].coords = VEC2D(60,60)
    tstcanv__append_polygon(polygon3)
         
    polygon3[1].coords = VEC2D(120,30) 
    polygon3[2].coords = VEC2D(150,30)
    polygon3[3].coords = VEC2D(150,60)
    polygon3[4].coords = VEC2D(120,60)
    tstcanv__append_polygon(polygon3)

    tstcanv__set_params(0, 1, 1, 0, 3)
    tstcanv__raster(PTH_LINETO)
    tstcanv__trace(PTH_LINETO)

    --clear lines 
    clear_lines(lines)
    tstcanv__get_lines(10, 20, lines)

    FOR i=1 TO ARRAY_LEN(act_line_r0) DO
      act_line_r0[i] = lines[i].r0
      act_line_r1[i] = lines[i].r1
    ENDFOR

    --expected lines
    exp_line_r0[1] = VEC2D(0,39) ; exp_line_r1[1] = VEC2D(30,39) ; 
    exp_line_r0[2] = VEC2D(60,39) ; exp_line_r1[2] = VEC2D(90,39) ; 
    exp_line_r0[3] = VEC2D(120,39) ; exp_line_r1[3] = VEC2D(150,39) ;
    exp_line_r0[4] = VEC2D(0,42) ; exp_line_r1[4] = VEC2D(30,42) ;
    exp_line_r0[5] = VEC2D(60,42) ; exp_line_r1[5] = VEC2D(90,42) ;
    exp_line_r0[6] = VEC2D(120,42) ; exp_line_r1[6] = VEC2D(150,42) ;
    exp_line_r0[7] = VEC2D(0,45) ; exp_line_r1[7] = VEC2D(30,45) ;
    exp_line_r0[8] = VEC2D(60,45) ; exp_line_r1[8] = VEC2D(90,45) ;
    exp_line_r0[9] = VEC2D(120,45) ; exp_line_r1[9] = VEC2D(150,45) ;
    exp_line_r0[10] = VEC2D(0,48) ; exp_line_r1[10] = VEC2D(30,48) ;

    --convert to path
    clear_contrs(contours)
    clear_contrs(line_pth)
    tstcanv__lines_to_vec_path(line_pth)
    tstcanv__contours_to_vec_path(contours)

    RETURN(kunit_eq_arv(exp_line_r0, act_line_r0, 0.05) AND kunit_eq_arv(exp_line_r1, act_line_r1, 0.05) )

  END t_rast_multi

ROUTINE t_rast_mult2 : BOOLEAN
  VAR
    i : INTEGER
    act_line_r0, exp_line_r0 : ARRAY[10] OF VECTOR
    act_line_r1, exp_line_r1 : ARRAY[10] OF VECTOR
  BEGIN
    tstcanv__new

    --set polygon
    clear_path(polygon3)
    append_nodes(polygon3, 4)
    
    polygon3[1].coords = VEC2D(0,10)   
    polygon3[2].coords = VEC2D(2,10)   
    polygon3[3].coords = VEC2D(2,14)
    polygon3[4].coords = VEC2D(0,14)
    tstcanv__append_polygon(polygon3)
   
    polygon3[1].coords = VEC2D(4,10)   
    polygon3[2].coords = VEC2D(6,10)   
    polygon3[3].coords = VEC2D(6,14)
    polygon3[4].coords = VEC2D(4,14)
    tstcanv__append_polygon(polygon3)
         
    polygon3[1].coords = VEC2D(8,10) 
    polygon3[2].coords = VEC2D(10,10)
    polygon3[3].coords = VEC2D(10,14)
    polygon3[4].coords = VEC2D(8,14)
    tstcanv__append_polygon(polygon3)

    tstcanv__set_params(0, 1, 1, 0, 1)
    tstcanv__raster(PTH_LINETO)
    tstcanv__trace(PTH_LINETO)

    --clear lines 
    clear_lines(lines)
    tstcanv__get_lines(1, 10, lines)

    FOR i=1 TO ARRAY_LEN(act_line_r0) DO
      act_line_r0[i] = lines[i].r0
      act_line_r1[i] = lines[i].r1
    ENDFOR

    --expected lines
    exp_line_r0[1] = VEC2D(0,10) ; exp_line_r1[1] = VEC2D(2,10) ; 
    exp_line_r0[2] = VEC2D(4,10) ; exp_line_r1[2] = VEC2D(6,10) ; 
    exp_line_r0[3] = VEC2D(8,10) ; exp_line_r1[3] = VEC2D(10,10) ;
    exp_line_r0[4] = VEC2D(0,11) ; exp_line_r1[4] = VEC2D(2,11) ;
    exp_line_r0[5] = VEC2D(4,11) ; exp_line_r1[5] = VEC2D(6,11) ;
    exp_line_r0[6] = VEC2D(8,11) ; exp_line_r1[6] = VEC2D(10,11) ;
    exp_line_r0[7] = VEC2D(0,12) ; exp_line_r1[7] = VEC2D(2,12) ;
    exp_line_r0[8] = VEC2D(4,12) ; exp_line_r1[8] = VEC2D(6,12) ;
    exp_line_r0[9] = VEC2D(8,12) ; exp_line_r1[9] = VEC2D(10,12) ;
    exp_line_r0[10] = VEC2D(0,13) ; exp_line_r1[10] = VEC2D(2,13) ;

    --convert to path
    clear_contrs(contours)
    clear_contrs(line_pth)
    tstcanv__lines_to_vec_path(line_pth)
    tstcanv__contours_to_vec_path(contours)

    RETURN(kunit_eq_arv(exp_line_r0, act_line_r0, 0.05) AND kunit_eq_arv(exp_line_r1, act_line_r1, 0.05) )

  END t_rast_mult2

ROUTINE t_hexagon : BOOLEAN
  VAR
%define radius 150
%define num_of_points 5
    i : INTEGER
    act_line_r0, exp_line_r0 : ARRAY[5] OF VECTOR
    act_line_r1, exp_line_r1 : ARRAY[5] OF VECTOR
    act_cntr_v, exp_cntr_v : ARRAY[5] OF VECTOR
    act_cntr_c, exp_cntr_c : ARRAY[5] OF INTEGER
  BEGIN

    --make hexagon
    clear_path(polygon4)
    draw__hexagon(radius, num_of_points, POS(radius,radius,0,0,0,180,(ZEROPOS(1).Config_data)), polygon4)

    --initialize polygon object
      --( frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch )
    tstcanv__init((ZEROPOS(1)), FALSE, -90, -1, 2, 0, 20)
     --append polygon into object
    tstcanv__append_polygon(polygon4)
    --raster lines
    tstcanv__raster(PTH_LINETO)
    --raster lines
    tstcanv__trace(PTH_LINETO)

    --copy lines from tstcanv object
    clear_lines(lines)
    tstcanv__get_lines(1, 5, lines)

    FOR i=1 TO ARRAY_LEN(act_line_r0) DO
      act_line_r0[i] = lines[i].r0
      act_line_r1[i] = lines[i].r1
    ENDFOR

    clear_contrs(contours)
    tstcanv__get_contours(7, 12, contours)

    FOR i=1 TO ARRAY_LEN(exp_cntr_v) DO
      act_cntr_v[i] = contours[i].v
      act_cntr_c[i] = contours[i].code
    ENDFOR
    
    --expected lines
    exp_line_r0[1] = VEC2D(50.853, 96.756) ; exp_line_r1[1] = VEC2D(50.853, 172.840) ; 
    exp_line_r0[2] = VEC2D(70.853, 82.225) ; exp_line_r1[2] = VEC2D(70.853, 234.394) ; 
    exp_line_r0[3] = VEC2D(90.853, 67.694) ; exp_line_r1[3] = VEC2D(90.853, 251.353) ;
    exp_line_r0[4] = VEC2D(110.853, 53.163) ; exp_line_r1[4] = VEC2D(110.853, 251.3531) ;
    exp_line_r0[5] = VEC2D(130.853, 38.633) ; exp_line_r1[5] = VEC2D(130.853, 251.353) ;

    exp_cntr_v[1] = VEC2D(30.853, 111.287) ; exp_cntr_c[1] = 1
    exp_cntr_v[2] = VEC2D(76.363, 251.353) ; exp_cntr_c[2] = 2
    exp_cntr_v[3] = VEC2D(223.637, 251.353) ;   exp_cntr_c[3] = 2
    exp_cntr_v[4] = VEC2D(269.147, 111.287) ;   exp_cntr_c[4] = 2
    exp_cntr_v[5] = VEC2D(150.000, 24.721) ;  exp_cntr_c[5] = 2


    RETURN(kunit_eq_arv(exp_cntr_v, act_cntr_v, 0.05) AND kunit_eq_ari(exp_cntr_c, act_cntr_c) AND &
           kunit_eq_arv(exp_line_r0, act_line_r0, 0.05) AND kunit_eq_arv(exp_line_r1, act_line_r1, 0.05) )

  END t_hexagon

ROUTINE t_upturns : BOOLEAN
  VAR
    i : INTEGER
    act_line_r0, exp_line_r0 : ARRAY[8] OF VECTOR
    act_line_r1, exp_line_r1 : ARRAY[8] OF VECTOR
  BEGIN
    --draw polygon
    --set polygon
    clear_path(polygon3)
    append_nodes(polygon3, 10)
    polygon3[1].coords = VEC2D(-3,-1)
    polygon3[2].coords = VEC2D(-2,-2)
    polygon3[3].coords = VEC2D(-1,-1)
    polygon3[4].coords = VEC2D(0,-2)
    polygon3[5].coords = VEC2D(1,-1)
    polygon3[6].coords = VEC2D(2,-2)
    polygon3[7].coords = VEC2D(3,-1)
    polygon3[8].coords = VEC2D(1.5,1)
    polygon3[9].coords = VEC2D(0,0)
    polygon3[10].coords = VEC2D(-1.5,1)

    --initialize polygon object
      --( frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch )
    tstcanv__init((ZEROPOS(1)), FALSE, 0, 1, 1, 0, 0.5)
    --append polygon to object
    tstcanv__append_polygon(polygon3)
    --raster polygon
    tstcanv__raster(PTH_LINETO)

    --clear lines
    clear_lines(lines)
    tstcanv__get_lines(1, 8, lines)

    FOR i=1 TO ARRAY_LEN(act_line_r0) DO
      act_line_r0[i] = lines[i].r0
      act_line_r1[i] = lines[i].r1
    ENDFOR

    --expected lines
    exp_line_r0[1] = VEC2D(-2.5,-1.5) ;   exp_line_r1[1] = VEC2D(-1.5,-1.5) ; 
    exp_line_r0[2] = VEC2D(-0.5,-1.5) ;   exp_line_r1[2] = VEC2D(0.5,-1.5) ;
    exp_line_r0[3] = VEC2D(1.5,-1.5) ;    exp_line_r1[3] = VEC2D(2.5,-1.5) ;
    exp_line_r0[4] = VEC2D(-3,-1) ;       exp_line_r1[4] = VEC2D(3.000, -1.000) ;
    exp_line_r0[5] = VEC2D(-2.625,-0.5) ; exp_line_r1[5] = VEC2D(2.625,-0.5) ;
    exp_line_r0[6] = VEC2D(-2.25,0) ;     exp_line_r1[6] = VEC2D(2.25,0) ;
    exp_line_r0[7] = VEC2D(-1.875,0.5) ;  exp_line_r1[7] = VEC2D(-0.75,0.5) ;
    exp_line_r0[8] = VEC2D(0.750, 0.500) ; exp_line_r1[8] = VEC2D(1.875, 0.500) ;

    RETURN(kunit_eq_arv(exp_line_r0, act_line_r0, 0.05) AND kunit_eq_arv(exp_line_r1, act_line_r1, 0.05) )

  END t_upturns


ROUTINE draw_pad(width, length : REAL; seperation : REAL; no_of_pads : INTEGER; start : VECTOR)
  VAR
    i : INTEGER
  BEGIN
    --create polygon
    clear_path(polygon1)
    append_nodes(polygon1, 4)

    FOR i=0 TO no_of_pads-1 DO
      polygon1[1].coords = start + i*VEC2D(seperation, 0)
      polygon1[2].coords = start + i*VEC2D(seperation, 0) + VEC2D(width,0)
      polygon1[3].coords = start + i*VEC2D(seperation, 0) + VEC2D(width,length)
      polygon1[4].coords = start + i*VEC2D(seperation, 0) + VEC2D(0,length)
      
      tstcanv__append_polygon(polygon1)
    ENDFOR
  END draw_pad

ROUTINE t_pads : BOOLEAN
  VAR
%define PAD_WIDTH 30
%define PAD_LENGTH 60
%defeval PAD_SEPERATION (20+PAD_WIDTH)
%define NO_OF_PADS 3
    i : INTEGER
  BEGIN
    tstcanv__new
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(50,50) )
    --raster lines
    --(start_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__set_params(0, 1, 1, 0, 10)
    tstcanv__raster(PTH_LINETO)

    RETURN(TRUE)
  END t_pads

BEGIN

%ifdef DEBUG_BUILD
  --(log_filename, show_date, show_debug, show_info)
  usrdis__new(LOG_NAME, FALSE, TRUE, TRUE)
  usrdis__open
  usrdis__clear_file
%endif

  -- total asserts 119
  kunit_test('test line intersection', t_intersect) -- asserts 10 
  kunit_test('test finding min and max points in polygon', t_anchr_pnts) -- asserts 4
  kunit_test('test convex hull star shape', t_convhull) -- asserts 4
  kunit_test('test convex hull of multiple polygons', t_convhull_m) -- asserts 4
  kunit_test('test bounding box', t_bbox) -- asserts 6
  kunit_test('test point collision on star', t_p_on_poly) -- asserts 4
  kunit_test('test point collision on c shaped', t_p_on_poly2) -- asserts 4
  kunit_test('line clip star polygon', t_clip_line) --asserts 8
  -- kunit_test('line clip on C shape', t_clip_line2) -- asserts 10
  kunit_test('multi polygon line clip', t_clpln_mult) -- asserts 6
  kunit_test('raster polygon', t_raster1) --asserts 24
  kunit_test('inset oblong T shape', t_inset) --asserts 5
  kunit_test('inset multiple polygons', t_inset_mult) --asserts 10
  kunit_test('trace lines around star polygon', t_trace) --asserts 2
  kunit_test('test polygon class with c-shape', t_class_poly) --asserts 2
  kunit_test('edge case. Turn vertex intersects line.', t_classpoly2) --asserts 2
  kunit_test('multi polygon raster', t_rast_multi) --asserts 2
  kunit_test('small multi polygon raster', t_rast_mult2) --asserts 2
  kunit_test('test create hexagon', t_hexagon) --asserts 4
  kunit_test('faceted polygon raster', t_upturns) -- asserts 2
  kunit_test('test create pads', t_pads)
  
  kunit_done

  --destruct classes
  tstcanv__delete

%ifdef DEBUG_BUILD
  usrdis__close
  usrdis__write_pipe
  usrdis__delete
%endif
END test_draw